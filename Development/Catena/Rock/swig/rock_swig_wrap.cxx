/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#include "Rock_Std.h"


#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Rock_Shared(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Rock_Shared(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Rock_Shared(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "Rock.h"
using namespace Rock;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp__UNICODE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__SWIG_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__WINDOWS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp__WIN32_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__11_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_11 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__11_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__12_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_12 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__12_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__13_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_13 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__13_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__14_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_14 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__14_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__21_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_21 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__21_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__22_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_22 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__22_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__23_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_23 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__23_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__24_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_24 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__24_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__31_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_31 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__31_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__32_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_32 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__32_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__33_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_33 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__33_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__34_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_34 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__34_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_34);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__41_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_41 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__41_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_41);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__42_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_42 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__42_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_42);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__43_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_43 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__43_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_43);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4__44_set(void * jarg1, float jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  if (arg1) (arg1)->_44 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4__44_get(void * jarg1) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT) ((arg1)->_44);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_rc_set(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT (*arg2)[4] ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT (*)[4])jarg2; 
  {
    Rock::RFLOAT (*inp)[4] = (Rock::RFLOAT (*)[4])(arg2);
    Rock::RFLOAT (*dest)[4] = (Rock::RFLOAT (*)[4])(arg1->rc);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      Rock::RFLOAT *ip = inp[ii];
      Rock::RFLOAT *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_rc_get(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT (*result)[4] = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT (*)[4])(Rock::RFLOAT (*)[4]) ((arg1)->rc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_v_set(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT *arg2 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT *)jarg2; 
  {
    size_t ii;
    Rock::RFLOAT *b = (Rock::RFLOAT *) arg1->v;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((Rock::RFLOAT *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_v_get(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT *result = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = (Rock::RFLOAT *)(Rock::RFLOAT *) ((arg1)->v);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_0() {
  void * jresult ;
  Rock::Matrix4x4 *result = 0 ;
  
  result = (Rock::Matrix4x4 *)new Rock::Matrix4x4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Matrix4x4__SWIG_1(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = 0 ;
  Rock::Matrix4x4 *result = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rock::Matrix4x4 const & type is null", 0);
    return 0;
  } 
  result = (Rock::Matrix4x4 *)new Rock::Matrix4x4((Rock::Matrix4x4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Matrix4x4(void * jarg1) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetRow__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Vector4 *arg3 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRow(arg2,(Vector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetRow__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Rock::RFLOAT arg3 ;
  Rock::RFLOAT arg4 ;
  Rock::RFLOAT arg5 ;
  Rock::RFLOAT arg6 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Rock::RFLOAT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  arg5 = (Rock::RFLOAT)jarg5; 
  arg6 = (Rock::RFLOAT)jarg6; 
  (arg1)->SetRow(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetColumn__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Vector4 *arg3 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & type is null", 0);
    return ;
  } 
  (arg1)->SetColumn(arg2,(Vector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetColumn__SWIG_1(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Rock::RFLOAT arg3 ;
  Rock::RFLOAT arg4 ;
  Rock::RFLOAT arg5 ;
  Rock::RFLOAT arg6 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Rock::RFLOAT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  arg5 = (Rock::RFLOAT)jarg5; 
  arg6 = (Rock::RFLOAT)jarg6; 
  (arg1)->SetColumn(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetAxisX__SWIG_0(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAxisX((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetAxisX__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  Rock::RFLOAT arg3 ;
  Rock::RFLOAT arg4 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  arg3 = (Rock::RFLOAT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  (arg1)->SetAxisX(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetAxisY__SWIG_0(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAxisY((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetAxisY__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  Rock::RFLOAT arg3 ;
  Rock::RFLOAT arg4 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  arg3 = (Rock::RFLOAT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  (arg1)->SetAxisY(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetAxisZ__SWIG_0(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetAxisZ((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetAxisZ__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  Rock::RFLOAT arg3 ;
  Rock::RFLOAT arg4 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  arg3 = (Rock::RFLOAT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  (arg1)->SetAxisZ(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetPosition__SWIG_0(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetPosition__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RFLOAT arg2 ;
  Rock::RFLOAT arg3 ;
  Rock::RFLOAT arg4 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  arg3 = (Rock::RFLOAT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  (arg1)->SetPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_SetCell(void * jarg1, int jarg2, int jarg3, float jarg4) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Rock::RINT arg3 ;
  Rock::RFLOAT arg4 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Rock::RINT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  (arg1)->SetCell(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_GetRow__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Vector4 result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  result = ((Rock::Matrix4x4 const *)arg1)->GetRow(arg2);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_GetColumn__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Vector4 result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  result = ((Rock::Matrix4x4 const *)arg1)->GetColumn(arg2);
  jresult = new Vector4((const Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_GetAxisX__SWIG_0(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = ((Rock::Matrix4x4 const *)arg1)->GetAxisX();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_GetAxisY__SWIG_0(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = ((Rock::Matrix4x4 const *)arg1)->GetAxisY();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_GetAxisZ__SWIG_0(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = ((Rock::Matrix4x4 const *)arg1)->GetAxisZ();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_GetPosition__SWIG_0(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = ((Rock::Matrix4x4 const *)arg1)->GetPosition();
  jresult = new Vector3((const Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Matrix4x4_GetCell__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Rock::RINT arg3 ;
  Rock::RFLOAT result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Rock::RINT)jarg3; 
  result = (Rock::RFLOAT)((Rock::Matrix4x4 const *)arg1)->GetCell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_GetRow__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Vector4 *arg3 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->GetRow(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_GetColumn__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Vector4 *arg3 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->GetColumn(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_GetAxisX__SWIG_1(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->GetAxisX(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_GetAxisY__SWIG_1(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->GetAxisY(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_GetAxisZ__SWIG_1(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->GetAxisZ(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_GetPosition__SWIG_1(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->GetPosition(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_GetCell__SWIG_1(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::RINT arg2 ;
  Rock::RINT arg3 ;
  Rock::RFLOAT *arg4 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::RINT)jarg2; 
  arg3 = (Rock::RINT)jarg3; 
  arg4 = (Rock::RFLOAT *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rock::RFLOAT & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->GetCell(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_Identity(void * jarg1) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  (arg1)->Identity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_Inverse(void * jarg1) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  (arg1)->Inverse();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_Transpose(void * jarg1) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  (arg1)->Transpose();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_Inversed__SWIG_0(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = ((Rock::Matrix4x4 const *)arg1)->Inversed();
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_Transposed__SWIG_0(void * jarg1) {
  void * jresult ;
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  result = ((Rock::Matrix4x4 const *)arg1)->Transposed();
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_Inversed__SWIG_1(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::Matrix4x4 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::Matrix4x4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rock::Matrix4x4 & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->Inversed(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Matrix4x4_Transposed__SWIG_1(void * jarg1, void * jarg2) {
  Rock::Matrix4x4 *arg1 = (Rock::Matrix4x4 *) 0 ;
  Rock::Matrix4x4 *arg2 = 0 ;
  
  arg1 = (Rock::Matrix4x4 *)jarg1; 
  arg2 = (Rock::Matrix4x4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Rock::Matrix4x4 & type is null", 0);
    return ;
  } 
  ((Rock::Matrix4x4 const *)arg1)->Transposed(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreatePerspectiveLH(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Rock::RFLOAT arg1 ;
  Rock::RFLOAT arg2 ;
  Rock::RFLOAT arg3 ;
  Rock::RFLOAT arg4 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Rock::RFLOAT)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  arg3 = (Rock::RFLOAT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  result = Rock::Matrix4x4::CreatePerspectiveLH(arg1,arg2,arg3,arg4);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreatePerspectiveRH(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Rock::RFLOAT arg1 ;
  Rock::RFLOAT arg2 ;
  Rock::RFLOAT arg3 ;
  Rock::RFLOAT arg4 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Rock::RFLOAT)jarg1; 
  arg2 = (Rock::RFLOAT)jarg2; 
  arg3 = (Rock::RFLOAT)jarg3; 
  arg4 = (Rock::RFLOAT)jarg4; 
  result = Rock::Matrix4x4::CreatePerspectiveRH(arg1,arg2,arg3,arg4);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreateIdentity() {
  void * jresult ;
  Rock::Matrix4x4 result;
  
  result = Rock::Matrix4x4::CreateIdentity();
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreateViewLH(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Rock::Matrix4x4::CreateViewLH((Vector3 const &)*arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreateViewRH(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Rock::Matrix4x4::CreateViewRH((Vector3 const &)*arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreateScale(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Rock::Matrix4x4::CreateScale((Vector3 const &)*arg1);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreateTranslate(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & type is null", 0);
    return 0;
  } 
  result = Rock::Matrix4x4::CreateTranslate((Vector3 const &)*arg1);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreateRotateX(float jarg1) {
  void * jresult ;
  Rock::RFLOAT arg1 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Rock::RFLOAT)jarg1; 
  result = Rock::Matrix4x4::CreateRotateX(arg1);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreateRotateY(float jarg1) {
  void * jresult ;
  Rock::RFLOAT arg1 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Rock::RFLOAT)jarg1; 
  result = Rock::Matrix4x4::CreateRotateY(arg1);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Matrix4x4_CreateRotateZ(float jarg1) {
  void * jresult ;
  Rock::RFLOAT arg1 ;
  Rock::Matrix4x4 result;
  
  arg1 = (Rock::RFLOAT)jarg1; 
  result = Rock::Matrix4x4::CreateRotateZ(arg1);
  jresult = new Rock::Matrix4x4((const Rock::Matrix4x4 &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

