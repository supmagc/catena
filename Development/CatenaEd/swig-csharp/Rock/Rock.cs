/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Rock {

public class Rock {
  public static Vector3 Normalized(Vector3 vVector) {
    Vector3 ret = new Vector3(RockPINVOKE.Normalized__SWIG_0(Vector3.getCPtr(vVector)), true);
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Length(Vector3 vVector) {
    float ret = RockPINVOKE.Length__SWIG_0(Vector3.getCPtr(vVector));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float LengthSq(Vector3 vVector) {
    float ret = RockPINVOKE.LengthSq__SWIG_0(Vector3.getCPtr(vVector));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Distance(Vector3 vVector0, Vector3 vVector1) {
    float ret = RockPINVOKE.Distance__SWIG_0(Vector3.getCPtr(vVector0), Vector3.getCPtr(vVector1));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Dot(Vector3 vVector0, Vector3 vVector1) {
    float ret = RockPINVOKE.Dot__SWIG_0(Vector3.getCPtr(vVector0), Vector3.getCPtr(vVector1));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 CrossLH(Vector3 vVector0, Vector3 vVector1) {
    Vector3 ret = new Vector3(RockPINVOKE.CrossLH__SWIG_0(Vector3.getCPtr(vVector0), Vector3.getCPtr(vVector1)), true);
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector3 CrossRH(Vector3 vVector0, Vector3 vVector1) {
    Vector3 ret = new Vector3(RockPINVOKE.CrossRH__SWIG_0(Vector3.getCPtr(vVector0), Vector3.getCPtr(vVector1)), true);
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Normalized(Vector3 vVector, Vector3 o_vNormalized) {
    RockPINVOKE.Normalized__SWIG_1(Vector3.getCPtr(vVector), Vector3.getCPtr(o_vNormalized));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Length(Vector3 vVector, SWIGTYPE_p_float o_nLength) {
    RockPINVOKE.Length__SWIG_1(Vector3.getCPtr(vVector), SWIGTYPE_p_float.getCPtr(o_nLength));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LengthSq(Vector3 vVector, SWIGTYPE_p_float o_nLengthSq) {
    RockPINVOKE.LengthSq__SWIG_1(Vector3.getCPtr(vVector), SWIGTYPE_p_float.getCPtr(o_nLengthSq));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Distance(Vector3 vVector0, Vector3 vVector1, SWIGTYPE_p_float o_nDistance) {
    RockPINVOKE.Distance__SWIG_1(Vector3.getCPtr(vVector0), Vector3.getCPtr(vVector1), SWIGTYPE_p_float.getCPtr(o_nDistance));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Dot(Vector3 vVector0, Vector3 vVector1, SWIGTYPE_p_float o_nDot) {
    RockPINVOKE.Dot__SWIG_1(Vector3.getCPtr(vVector0), Vector3.getCPtr(vVector1), SWIGTYPE_p_float.getCPtr(o_nDot));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CrossLH(Vector3 vVector0, Vector3 vVector1, Vector3 o_vCross) {
    RockPINVOKE.CrossLH__SWIG_1(Vector3.getCPtr(vVector0), Vector3.getCPtr(vVector1), Vector3.getCPtr(o_vCross));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CrossRH(Vector3 vVector0, Vector3 vVector1, Vector3 o_vCross) {
    RockPINVOKE.CrossRH__SWIG_1(Vector3.getCPtr(vVector0), Vector3.getCPtr(vVector1), Vector3.getCPtr(o_vCross));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float Dot(Vector4 vVector0, Vector4 vVector1) {
    float ret = RockPINVOKE.Dot__SWIG_2(Vector4.getCPtr(vVector0), Vector4.getCPtr(vVector1));
    if (RockPINVOKE.SWIGPendingException.Pending) throw RockPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int _UNICODE = RockPINVOKE._UNICODE_get();
  public static readonly int _WIN32 = RockPINVOKE._WIN32_get();
}

}
