/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Diamond {

public class Renderer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Renderer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Renderer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Renderer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Diamond_SharedPINVOKE.delete_Renderer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Renderer(Scene pScene, SWIGTYPE_p_IDevice pDevice) : this(Diamond_SharedPINVOKE.new_Renderer(Scene.getCPtr(pScene), SWIGTYPE_p_IDevice.getCPtr(pDevice)), true) {
  }

  public void Draw() {
    Diamond_SharedPINVOKE.Renderer_Draw(swigCPtr);
  }

  public bool CanDraw() {
    bool ret = Diamond_SharedPINVOKE.Renderer_CanDraw(swigCPtr);
    return ret;
  }

  public void SetCanvas(SWIGTYPE_p_Diamond__ICanvas pCanvas) {
    Diamond_SharedPINVOKE.Renderer_SetCanvas(swigCPtr, SWIGTYPE_p_Diamond__ICanvas.getCPtr(pCanvas));
  }

  public void SetViewer(SWIGTYPE_p_Diamond__IViewer pViewer) {
    Diamond_SharedPINVOKE.Renderer_SetViewer(swigCPtr, SWIGTYPE_p_Diamond__IViewer.getCPtr(pViewer));
  }

  public SWIGTYPE_p_Diamond__ICanvas GetCanvas() {
    global::System.IntPtr cPtr = Diamond_SharedPINVOKE.Renderer_GetCanvas__SWIG_0(swigCPtr);
    SWIGTYPE_p_Diamond__ICanvas ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Diamond__ICanvas(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Diamond__IViewer GetViewer() {
    global::System.IntPtr cPtr = Diamond_SharedPINVOKE.Renderer_GetViewer__SWIG_0(swigCPtr);
    SWIGTYPE_p_Diamond__IViewer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Diamond__IViewer(cPtr, false);
    return ret;
  }

  public Scene GetScene() {
    global::System.IntPtr cPtr = Diamond_SharedPINVOKE.Renderer_GetScene__SWIG_0(swigCPtr);
    Scene ret = (cPtr == global::System.IntPtr.Zero) ? null : new Scene(cPtr, false);
    return ret;
  }

}

}
