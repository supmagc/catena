/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Diamond {

public class Core : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Core(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Core obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Core() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          Diamond_SharedPINVOKE.delete_Core(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Core() : this(Diamond_SharedPINVOKE.new_Core(), true) {
  }

  public Scene GetScene() {
    global::System.IntPtr cPtr = Diamond_SharedPINVOKE.Core_GetScene(swigCPtr);
    Scene ret = (cPtr == global::System.IntPtr.Zero) ? null : new Scene(cPtr, false);
    return ret;
  }

  public SceneView CreateSceneView(uint nWidth, uint nHeight) {
    global::System.IntPtr cPtr = Diamond_SharedPINVOKE.Core_CreateSceneView(swigCPtr, nWidth, nHeight);
    SceneView ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneView(cPtr, false);
    return ret;
  }

  public void ReleaseSceneView(SceneView pView) {
    Diamond_SharedPINVOKE.Core_ReleaseSceneView(swigCPtr, SceneView.getCPtr(pView));
  }

  public SceneView Create(int nWnd, uint nWidth, uint nHeight, bool bFullscreen) {
    global::System.IntPtr cPtr = Diamond_SharedPINVOKE.Core_Create(swigCPtr, nWnd, nWidth, nHeight, bFullscreen);
    SceneView ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneView(cPtr, false);
    return ret;
  }

  public bool Update() {
    bool ret = Diamond_SharedPINVOKE.Core_Update(swigCPtr);
    return ret;
  }

}

}
